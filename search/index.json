[{"content":"Git使用 登陆 使用ssh的方式更方便\n首先找到用户目录下C:/user/username/.ssh\n没有就自己建\n然后打开gitbash\n命令\n ssh-keygen -t rsa [邮箱:可以不填] // 前面是生成密钥,后面的参数是加密(使用的加密算法),可以不写\n 添加public公钥 git命令 第一次使用 设置全局的姓名和邮箱,可以区分是谁干了什么\ngit config --global user.name \u0026#34;姓名\u0026#34; git config --global user.email *********@**.com 常用命令   查看状态\ngit status   查看提交记录\n 无参数版 git log  图形化显示分支情况 git log --graph     来 从网上其它仓库直接克隆\ngit clone https:// *** *** ***.git   去\n 初始化 git init  都提交到暂存区 git add .  提交到仓库  提交  git commit -m \u0026#34;提交描述\u0026#34;  更正最近一次提交,不产生新的快照  git commit --amend [-m \u0026#34;新提交描述\u0026#34;]     回\n 放弃更改 git restore -- \u0026lt;filename\u0026gt; //将文件返回提交的模样,也就是放弃修改(这个做不好的话新写的文件就没有了!)  reset  从暂存区返回 git reset HEAD \u0026lt;filename\u0026gt;// 反悔了,将最近提交的文件从暂存区取回,加上文件名表示只移除特定文件  从仓库返回:文件状态恢复HEAD后有几个\u0026quot;~\u0026ldquo;就表示退到多少次提交之前,也可以用数字 HEAD~3 相当于 HEAD~~~\n回到指定的快照直接输入几位识别码就行,例如: git reset 3j2ak43d3f  soft git reset --soft fc234dx // 只改变仓库内容,工作区和暂存区不受影响  mixed git reset --mixed HEAD~ // (默认) 将快照回滚到暂存区,工作区不受影响  hard git reset --hard 243c4dx2werc234 // 将快照还原到当前工作目录,所有区都受影响    只恢复单个文件 git reset 3412qw43 filepath/filename       diff\n 比较暂存区与工作区(默认) git diff  比较工作区与仓库 git diff 快照id // 如果是比较最新提交的快照可以直接用 HEAD  比较两个历史版本 git diff 快照id1 快照id2     分支\n 创建分支 git branch [分支名]  切换分支 git checkout [分支名]  合并分支,合并到本分支 git merge [分支名]  删除分支 git branch -d [分支名]  匿名分支:随便使用,不会对文件产生任何影响,可以做任何实验性的事情 git checkout HEAD~     与远程仓库的交互\n 查看连接状态 git remote -v  建立连接 git remote [新连接的名字] [连接的地址]  连接目标重命名 git remote rename [oldName] [newName]  推送到远程仓库 git push [仓库名,例如origin]     琐碎的小命令:并不是git的命令\ncd psw ls [-la] mkdir touch rm [-r] vim cat history clear   一些文件  .git文件夹 .gitignore:忽略文件  ","date":"2021-01-24T18:53:26+08:00","permalink":"https://xoxzzz.com/p/git/","title":"Git"},{"content":"就是这样👇 ","date":"2021-01-23T13:14:05+08:00","permalink":"https://xoxzzz.com/p/%E6%88%91%E7%9A%84%E7%BD%91%E7%AB%99%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86/","title":"我的网站可以访问了!"},{"content":"md 这是vscode的快捷键, vscode比较适合写markdown\n   快捷键 作用     alt + v 打开编辑栏的查看   ctrl + b 左侧列表   ctrl+shift+k 删除一行    列表 + 我是谁 + 这是哪里? + 这个怎么样? + 有序列表[^1] + 大苏打 1. fedfsd 2. fsdfsD  我是谁 这是哪里? 这个怎么样? 有序列表1 大苏打  fedfsd fsdfsD    琐碎的东西 md文件可以使用html语句 \u0026lt;img src=\u0026#34;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3848402655,92542552\u0026amp;fm=26\u0026amp;gp=0.jpg\u0026#34;\u0026gt; 看开这里不行,不然应该在这句话上面是显示下面这张图\n字体 *斜体* **粗体** ***粗斜体*** 斜体 粗体 粗斜体\n引用 文章引用 \u0026gt; 鲁迅说:\u0026#34;哈哈哈 哈哈哈哈\u0026#34; 文章引用\n 鲁迅说:\u0026ldquo;哈哈哈\n哈哈哈哈\u0026rdquo;\n 代码块 ```cpp # include\u0026lt;iostream\u0026gt; // 代码块 ``` # include\u0026lt;iostream\u0026gt; // 代码块 删除线 ~~你好厉害,删除线~~ 你好厉害,删除线\n超链接 [myWeb](http://www.xoxzzz.com \u0026#34;cx\u0026#34;) myWeb\n![图片1](https://i2.hdslb.com/bfs/archive/2fbf5632f0f79daae4cac0ab7a717473d3cbb413.jpg@336w_190h.webp \u0026#34;Visual Studio\u0026#34;) 表格 |表格|居中|靠右| |-|:-:|---:| 11|12|13 21|22|23 31|32|33    表格 居中 靠右     11 12 13   21 22 23   31 32 33    最后一行是前面写的注释\n  erdsfsdasafdasf111 \u0026#x21a9;\u0026#xfe0e;\n   ","date":"2021-01-22T18:18:45+08:00","image":"https://xoxzzz.com/post/markDown/markdown.png","permalink":"https://xoxzzz.com/p/markdown/","title":"Markdown"},{"content":"Vim 三种模式   控制模式\n i  文本编辑模式   跳转 w  跳到下一个单词   b  向左移动光标，以单词为单位   光标的移动  j 向下 k 向上 h 向左 l 向右   ^  跳转到该行的首个字符   0  跳转到该行的行首   $  跳转到该行的行尾   a  在行尾添加文字   o  新建并跳转到下一行进行输入   H  跳转到该页的头部   M  跳转到该页的中间   L  跳转到该页的底部   m[a-z]  添加标记,标记为[a-z]   \u0026lsquo;[a-z]  跳回标记处   { / }  在段落之间跳转   g  [number]gg 跳转到指定行 G 跳到文档最后   x  剪切字符 [number]x 删除number个字符   d  删除  dd 删除一行 d[number]j 向下删除number行和本行 d[number]j 向上删除number行和本行     D  删除到行尾   y  复制  yy 复制本行 y[number]y 向下复制number行     u  撤销操作   ctrl + r  恢复撤销的操作   p  粘贴  [number]p 粘贴number遍     /  搜索   替换  格式  %s/旧内容/新内容 所有内容 s/旧内容/新内容 选中的部分 后面添加 /c 会询问是否替换，可以一个一个确认     :  sp 横向分屏 vsp 纵向分屏 w 写入文件 q 退出 x 保存并退出      插入模式\n 直接输入信息    可视模式\n v 可视模式，自由选择 V 可视行模式，选择行 ctrl + v 可视块模式，选择块    esc\n 返回控制模式    ","date":"2021-01-22T18:15:16+08:00","image":"https://xoxzzz.com/post/vim/vim.png","permalink":"https://xoxzzz.com/p/vim/","title":"Vim"},{"content":"this is my Blog 第一次写Blog当然是要写我的这个东西是怎么弄的了,不然以后忘记了还要到处找\n用了哪些东西    构成 具体工具     存放平台 GitHub   版本工具 Git   Blog工具 hugo   主题 keepit    一些命令 首先要搭配环境变量\n 新建一个Blog站点 hugo new site blog  选择主题 去themes.gohugo.io // 每一个主题的页面都有使用方法 cd themes git clone [主题地址]  本地运行 hugo server [--buildDrafts] buildDrafts是显示草稿\n 新建文章 hugo new post/[文章文件夹]/[文章名字]  生成public文件夹 hugo  git相关 先到public目录下 git init git add . git commit -m \u0026quot;第一次提交\u0026quot; // git仓库新建时有提示 git remote add origin git@github.com:xxxx/x.github.io.git git push -u master   ","date":"2021-01-22T13:06:39+08:00","image":"https://xoxzzz.com/post/firstUseBlog/test.jpg","permalink":"https://xoxzzz.com/p/firstuseblog/","title":"FirstUseBlog"},{"content":"Java 与 数据库 连接操作 加载驱动 Class.forName(); 建立连接 Connection conn = Driverment.getConnection(url,username,password); 执行 Statement stat = conn.createStatement(); 更安全的版本 -\u0026gt; prepareStatement 防止sql注入 String sql = \u0026#34;select * from student where name = ? \u0026#34;; PrepareStatement stat = conn.ptepateStatement(); stat.setString(1,sql); 提取方法 /** *Object... params 可变参数 相当于数值 */ public int executeUpdate(String sql, Object... params) throws SQLException{ int result = 0; stat = conn.prepareStatement(sql); for(int i=0;i\u0026lt;prepareStatement.length;i++){ stat.setObject(i+1;Params[i]); } result = stat.executeUpdate(); return result; } 保证事务的原子性 // try...catch conn.setAutoCommit(false); // 省略sql 操作 conn.commit(); // 捕获异常后 conn.rollback(); 保存结果 ResultSet rs = stat.executeQurey(); ","date":"2021-01-22T13:06:39+08:00","image":"https://xoxzzz.com/post/java_Database/java.png","permalink":"https://xoxzzz.com/p/java-%E4%B8%8E-%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"java 与 数据库"}]