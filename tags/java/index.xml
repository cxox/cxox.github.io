<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on ✧Cibert</title>
    <link>https://mygithub-cx.github.io/tags/java/</link>
    <description>Recent content in java on ✧Cibert</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jan 2021 13:06:39 +0800</lastBuildDate><atom:link href="https://mygithub-cx.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java 与 数据库</title>
      <link>https://mygithub-cx.github.io/p/java-%E4%B8%8E-%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Fri, 22 Jan 2021 13:06:39 +0800</pubDate>
      
      <guid>https://mygithub-cx.github.io/p/java-%E4%B8%8E-%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>Java 与 数据库 连接操作 加载驱动 Class.forName(); 建立连接 Connection conn = Driverment.getConnection(url,username,password); 执行 Statement stat = conn.createStatement(); 更安全的版本 -&amp;gt; prepareStatement 防止sql注入 String sql = &amp;#34;select * from student where name = ? &amp;#34;; PrepareStatement stat = conn.ptepateStatement(); stat.setString(1,sql); 提取方法 /** *Object... params 可变参数 相当于数值 */ public int executeUpdate(String sql, Object... params) throws SQLException{ int result = 0; stat = conn.prepareStatement(sql); for(int i=0;i&amp;lt;prepareStatement.length;i++){ stat.setObject(i+1;Params[i]); } result = stat.executeUpdate(); return result; } 保证事务的原子性 // try.</description>
    </item>
    
  </channel>
</rss>
